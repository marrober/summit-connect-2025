apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  labels:
    app.kubernetes.io/instance: travel-git
    app.kubernetes.io/name: travel-git
    pipeline.openshift.io/runtime: nodejs
    pipeline.openshift.io/runtime-version: 16-ubi8
    pipeline.openshift.io/type: kubernetes
  name: travel
spec:
  params:
    ## Repository parameters
  - name: GIT_REPO
    type: string
  - name: GIT_REVISION
    default: ""
    type: string
  - name: clone_location
    type: string
  - name: GIT_REPO_NAME
    type: string
    ## Git signed verification parameters
  - name: certificate-identity
    type: string
  - name: oidc-issuer
    type: string
  - name: rekor-url
    type: string
  - name: tuf-mirror
    type: string
    ## Image build parameters
  - name: PATH_CONTEXT
    default: .
    type: string
  - name: STORAGE_DRIVER
    type: string
  - name: TLSVERIFY
    type: string
  - name: dockerfile
    type: string
 # - name: VERSION
 #   default: 16-ubi8
 #   type: string
    # OpenShift imagestream URL parameters
    #
  - name: IMAGE_NAME 
    type: string
    ## Image validation parameters
  - name: acs_central_endpoint              
    type: string
  - name: acs_api_token                     
    type: string
  - name: roxctl-output-format             
    type: string
    ## Update Argocd application and commit to Github parameters
  - name: cd-git-repo-name
    type: string
  - name: cd-git-repo-path-to-content-development
    type: string
  - name: cd-git-user-name
    type: string
  - name: cd-git-user-email
    type: string
  - name: cd-git-commit-comment-dev 
    type: string
    ## ArgoCD Sync
  - name: argocd-project-name-development
    type: string
  - name: argocd-revision
    type: string
  - name: argocd-version
    type: string
    ## Push to quay
  - name: quay-instance-url
    type: string
  - name: quay-account                   # Quay account name
    type: string
  - name: quay-repository                # Quay repository name
    type: string
    ## Go source code
  - name: app_path
    type: string
  - name: app_name
    type: string
  tasks:
##------------------------------------------------------------------
# Fetch source for dockerfile
##------------------------------------------------------------------
  - name: fetch-repository
    params:
    - name: url
      value: $(params.GIT_REPO)
    - name: revision
      value: $(params.GIT_REVISION)
    - name: repoName
      value: $(params.GIT_REPO_NAME)
    - name: subdirectory
      value: ""
    - name: deleteExisting
      value: "true"
    - name: clone_location
      value: $(params.clone_location)
    taskRef:
      kind: Task
      name: git-clone
    workspaces:
    - name: output
      workspace: workspace
##------------------------------------------------------------------
# Build 'GO' source code
##------------------------------------------------------------------
  - name: build-go-application
    params:
    - name: app_path
      value: $(params.clone_location)/$(params.app_path)
    - name: app_name
      value: $(params.app_name)
    taskRef:
      kind: Task
      name: golang-build
    workspaces:
    - name: output
      workspace: workspace
    runAfter:
    - fetch-repository
##------------------------------------------------------------------
# Verify commit of code to the repository
##------------------------------------------------------------------
#  - name: verify-commit
#    params:
#    - name: certificate-identity
#      value: $(params.certificate-identity)
#    - name: oidc-issuer
#      value: $(params.oidc-issuer)
#    - name: rekor-url
#      value: $(params.rekor-url)
#    - name: tuf-mirror
#      value: $(params.tuf-mirror)
#    runAfter:
#      - fetch-repository
#    taskRef:
#      kind: Task
#      name: verify-commit
#    workspaces:
#      - name: repository
#        workspace: workspace
##------------------------------------------------------------------
# Build Node.JS application
##------------------------------------------------------------------
  - name: build-container
    params:
    - name: TLSVERIFY
      value: "false"
    - name: STORAGE_DRIVER
      value: $(params.STORAGE_DRIVER)
    - name: path_context
      value: $(params.clone_location)/$(params.PATH_CONTEXT)
    - name: app_name
      value: $(params.app_name)
    - name: dockerfile
      value: $(params.dockerfile)
    runAfter:
#    - verify-commit
     - build-go-application
    taskRef:
      kind: Task
      name: build
    workspaces:
    - name: resources
      workspace: workspace
    - name: files
      workspace: files
#------------------------------------------------------------------
# Push the new runtime image to OpenShift imagestream
#------------------------------------------------------------------
  - name: push-image-to-imagestream
    params:
    - name: imagestream-url
      value: $(params.IMAGE_NAME)
    - name: STORAGE_DRIVER
      value: $(params.STORAGE_DRIVER)
    - name: TLSVERIFY
      value: "$(params.TLSVERIFY)"
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    taskRef:
      kind: Task
      name: push-image-to-ocp
    runAfter:
      - build-container
    workspaces:
    - name: files
      workspace: files
##------------------------------------------------------------------
# Perform image build check
##------------------------------------------------------------------
  - name: image-build-check
    params:
    - name: acs_central_endpoint
      value: $(params.acs_central_endpoint)
    - name: acs_api_token
      value: $(params.acs_api_token)
    - name: public-url
      value: $(params.IMAGE_NAME):$(tasks.push-image-to-imagestream.results.new-tag)
    - name: roxctl-output-format
      value: $(params.roxctl-output-format)
    taskRef:
      kind: Task
      name: acs-image-build-check
    runAfter:
    - push-image-to-imagestream
##------------------------------------------------------------------
# Push the new runtime image to quay.io
##------------------------------------------------------------------
  - name: push-image-to-quay
    params:
    - name: quay-instance-url
      value: $(params.quay-instance-url)
    - name: quay-account
      value: $(params.quay-account)
    - name: quay-repository
      value: $(params.quay-repository)
    - name: image-stream-location
      value: $(params.IMAGE_NAME)
    - name: STORAGE_DRIVER
      value: $(params.STORAGE_DRIVER)
    - name: imageTag
      value: $(tasks.push-image-to-imagestream.results.new-tag)
    taskRef:
      kind: Task
      name: push-image-to-quay
    runAfter:
      - image-build-check
    when:
    - input: "$(tasks.image-build-check.results.scan-result)"
      operator: in
      values:
      - "pass"
    workspaces:
    - name: resources
      workspace: workspace
    - name: files
      workspace: files
##------------------------------------------------------------------
# Perform image build check after push to quay.io
##------------------------------------------------------------------
#  - name: image-build-check-in-quay-io
#    params:
#    - name: acs_central_endpoint
#      value: $(params.acs_central_endpoint)
#    - name: acs_api_token
#      value: $(params.acs_api_token)
#    - name: public-url
#      value: $(params.quay-instance-url)/$(params.quay-account)/$(params.quay-repository):$(tasks.push-image-to-imagestream.results.new-tag)
#    - name: roxctl-output-format
#      value: $(params.roxctl-output-format)
#    taskRef:
#      kind: Task
#      name: acs-image-build-check
#    when:
#    - input: "$(tasks.image-build-check.results.scan-result)"
#      operator: in
#      values:
#      - "pass"
#    runAfter:
#    - push-image-to-quay
##------------------------------------------------------------------
# Clone the cd repository and update the argocd application file 
# to refer to the new tagged image.
##------------------------------------------------------------------
  - name: update-dev-deployment
    params:
    - name: GIT_URL
      value: $(params.GIT_REPO)
    - name: GIT_REPO_NAME
      value: $(params.cd-git-repo-name)
    - name: GIT_BRANCH
      value: "main"
    - name: GIT_PATH_TO_CONTENT
      value: $(params.cd-git-repo-path-to-content-development)
    - name: GIT_USER_NAME
      value: $(params.cd-git-user-name)
    - name: GIT_USER_EMAIL
      value: $(params.cd-git-user-email)
    - name: GIT_COMMIT_COMMENT
      value: $(params.cd-git-commit-comment-dev)
    - name: IMAGE
      value: $(tasks.push-image-to-quay.results.quay-image-repo-location)
    - name: LOCATION
      value: "dev"
    taskRef:
      kind: Task
      name: update-and-commit-argocd-app-file
    runAfter:
    - push-image-to-quay
    workspaces:
    - name: files
      workspace: files
##------------------------------------------------------------------
# Force ArgoCD sync
##------------------------------------------------------------------
#  - name: sync-argocd
#    params:
#    - name: application-name
#      value: $(params.argocd-project-name-development)
#    - name: revision
#      value: $(params.argocd-revision)
#    - name: argocd-version
#      value: $(params.argocd-version)
#    taskRef:
#      kind: Task
#      name: argocd-sync-and-wait
#    runAfter:
#    - update-dev-deployment
##------------------------------------------------------------------
# Workspaces
##------------------------------------------------------------------
  results:
    - name: IMAGE_URL
      value: "$(tasks.push-image-to-quay.results.IMAGE_URL)"
    - name: IMAGE_DIGEST
      value: "$(tasks.push-image-to-quay.results.IMAGE_DIGEST)"
    - name: CHAINS-GIT_URL
      value: "$(tasks.fetch-repository.results.url)"
    - name: CHAINS-GIT_COMMIT
      value: "$(tasks.fetch-repository.results.commit)"
  workspaces:
  - name: workspace
  - name: files